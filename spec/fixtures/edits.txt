### Change is on previous commit
#### Edit first line
a b c d e -> z b c d e
z b c d e

#### Edit in middle
a b c d e -> a b z d e
a b z d e

#### Edit last line
a b c d e -> a b c d z
a b c d z


### Change is on 2nd previous commit
#### Edit first line
a b c d e   -> z b c d e
a b c d e f -> z b c d e f
z b c d e f

#### Edit in middle
a b c d e   -> a b z d e
a b c d e f -> a b z d e f
a b z d e f

#### Edit last line
a b c d e -> a b c d z
a b f c d e -> a b f c d z
a b f c d z


### Progressive
#### Edit first line of first commit
a1 a2 -> z a2
a1 a2 b -> z a2 b
a1 a2 b c -> z a2 b c
z a2 b c

#### Edit last line of first commit
%test {nb_merge_conflicts: 1}
a1 a2
a1 a2 b
a1 a2 b c
a1 z b c

#### Edit first line (whole commit)
%test {nb_merge_conflicts: 1}
a
a b
a b c
z b c

#### Edit in middle
%test {nb_merge_conflicts: 1}
a
a b
a b c
a b c d
a b c d e
a b z d e

#### Edit last line
a
a b
a b c -> a b z
a b z


### Progressive from end
#### Edit first line
c
b c
a b c -> z b c
z b c

#### Edit in middle
%test {nb_merge_conflicts: 1}
e
d e
c d e
b c d e
a b c d e
a b z d e

#### Edit first line of first commit
%test {nb_merge_conflicts: 1}
c1 c2
b c1 c2
a b c1 c2
a b z c2

#### Edit last line of first commit
c1 c2 -> c1 z
b c1 c2 -> b c1 z
a b c1 c2 -> a b c1 z
a b c1 z

#### Edit last line (whole commit)
%test {nb_merge_conflicts: 1}
c
b c
a b c
a b z

### TODO: Check when there is no final new_line and when there are
### TODO: Check when there are duplicate lines, either consecutive or not (SKIP)



a b c d e
a b z d e
a x z y e

# This is tricky, z and y are changes to the same previous commit, and the same chunk of changes.
# But we have since removed part of that shared chunk in the middle. So this can't be applied as a single commit/fixup
# However, if we do each one individually, it makes sense to work...
a b c d e
a b d e
a z y e
